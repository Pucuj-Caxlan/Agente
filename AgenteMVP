import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, List, Optional, Any
from enum import Enum
from dataclasses import dataclass
import psycopg2
from psycopg2.extras import RealDictCursor
import logging

# ====================================================================

# 1. ESTRUCTURAS BASE DEL SISTEMA

# ====================================================================

class AgentType(Enum):
CREATOR = ‚Äúcreator‚Äù          # Agente que crea otros agentes
SPECIALIST = ‚Äúspecialist‚Äù    # Agente especializado en tareas espec√≠ficas
REVIEWER = ‚Äúreviewer‚Äù        # Agente que revisa trabajo de otros
COORDINATOR = ‚Äúcoordinator‚Äù  # Agente que coordina tareas grupales

class TaskStatus(Enum):
PENDING = ‚Äúpending‚Äù
IN_PROGRESS = ‚Äúin_progress‚Äù
COMPLETED = ‚Äúcompleted‚Äù
FAILED = ‚Äúfailed‚Äù
UNDER_REVIEW = ‚Äúunder_review‚Äù

@dataclass
class AgentConfig:
‚Äú‚Äù‚ÄúConfiguraci√≥n de un agente‚Äù‚Äù‚Äù
agent_id: str
agent_type: AgentType
specialization: str
capabilities: List[str]
learning_rate: float = 0.01
collaboration_level: float = 0.8
created_at: datetime = None
model_version: str = ‚Äúv1.0‚Äù

@dataclass
class Task:
‚Äú‚Äù‚ÄúDefinici√≥n de una tarea‚Äù‚Äù‚Äù
task_id: str
description: str
agent_ids: List[str]  # Agentes asignados
status: TaskStatus
priority: int = 1
created_at: datetime = None
dependencies: List[str] = None  # IDs de tareas dependientes
collaboration_type: str = ‚Äúsolo‚Äù  # solo, parallel, sequential

# ====================================================================

# 2. GESTOR DE BASE DE DATOS POSTGRESQL

# ====================================================================

class DatabaseManager:
‚Äú‚Äù‚ÄúManeja todas las operaciones de base de datos‚Äù‚Äù‚Äù

```
def __init__(self, db_config: Dict):
    self.db_config = db_config
    self.connection = None
    
def connect(self):
    """Establece conexi√≥n con PostgreSQL"""
    try:
        self.connection = psycopg2.connect(**self.db_config)
        print("‚úÖ Conexi√≥n a PostgreSQL establecida")
    except Exception as e:
        print(f"‚ùå Error conectando a PostgreSQL: {e}")
        raise

def create_tables(self):
    """Crea las tablas necesarias"""
    sql_commands = [
        """
        CREATE TABLE IF NOT EXISTS agents (
            agent_id VARCHAR(255) PRIMARY KEY,
            agent_type VARCHAR(50) NOT NULL,
            specialization VARCHAR(255),
            capabilities JSONB,
            config JSONB,
            performance_metrics JSONB,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_active BOOLEAN DEFAULT TRUE
        );
        """,
        """
        CREATE TABLE IF NOT EXISTS tasks (
            task_id VARCHAR(255) PRIMARY KEY,
            description TEXT NOT NULL,
            agent_ids JSONB,
            status VARCHAR(50) DEFAULT 'pending',
            priority INTEGER DEFAULT 1,
            collaboration_type VARCHAR(50) DEFAULT 'solo',
            dependencies JSONB,
            result JSONB,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            completed_at TIMESTAMP
        );
        """,
        """
        CREATE TABLE IF NOT EXISTS agent_interactions (
            interaction_id SERIAL PRIMARY KEY,
            agent_from VARCHAR(255) REFERENCES agents(agent_id),
            agent_to VARCHAR(255) REFERENCES agents(agent_id),
            task_id VARCHAR(255) REFERENCES tasks(task_id),
            interaction_type VARCHAR(50),
            content JSONB,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """,
        """
        CREATE TABLE IF NOT EXISTS learning_data (
            record_id SERIAL PRIMARY KEY,
            agent_id VARCHAR(255) REFERENCES agents(agent_id),
            task_id VARCHAR(255) REFERENCES tasks(task_id),
            input_data JSONB,
            output_data JSONB,
            performance_score FLOAT,
            feedback JSONB,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """,
        """
        CREATE TABLE IF NOT EXISTS agent_versions (
            version_id SERIAL PRIMARY KEY,
            agent_id VARCHAR(255) REFERENCES agents(agent_id),
            version_number VARCHAR(50),
            model_weights JSONB,
            training_data_checksum VARCHAR(255),
            performance_baseline JSONB,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        """
    ]
    
    cursor = self.connection.cursor()
    for command in sql_commands:
        cursor.execute(command)
    self.connection.commit()
    cursor.close()
    print("‚úÖ Tablas creadas exitosamente")

def save_agent(self, agent_config: AgentConfig):
    """Guarda un agente en la base de datos"""
    cursor = self.connection.cursor()
    cursor.execute("""
        INSERT INTO agents (agent_id, agent_type, specialization, capabilities, config)
        VALUES (%s, %s, %s, %s, %s)
        ON CONFLICT (agent_id) DO UPDATE SET
            updated_at = CURRENT_TIMESTAMP,
            config = EXCLUDED.config
    """, (
        agent_config.agent_id,
        agent_config.agent_type.value,
        agent_config.specialization,
        json.dumps(agent_config.capabilities),
        json.dumps(agent_config.__dict__, default=str)
    ))
    self.connection.commit()
    cursor.close()

def save_task(self, task: Task):
    """Guarda una tarea en la base de datos"""
    cursor = self.connection.cursor()
    cursor.execute("""
        INSERT INTO tasks (task_id, description, agent_ids, status, priority, 
                         collaboration_type, dependencies)
        VALUES (%s, %s, %s, %s, %s, %s, %s)
        ON CONFLICT (task_id) DO UPDATE SET
            status = EXCLUDED.status,
            result = EXCLUDED.result
    """, (
        task.task_id,
        task.description,
        json.dumps(task.agent_ids),
        task.status.value,
        task.priority,
        task.collaboration_type,
        json.dumps(task.dependencies or [])
    ))
    self.connection.commit()
    cursor.close()

def save_learning_data(self, agent_id: str, task_id: str, input_data: Dict, 
                      output_data: Dict, performance_score: float):
    """Guarda datos de aprendizaje para machine learning"""
    cursor = self.connection.cursor()
    cursor.execute("""
        INSERT INTO learning_data (agent_id, task_id, input_data, output_data, performance_score)
        VALUES (%s, %s, %s, %s, %s)
    """, (
        agent_id,
        task_id,
        json.dumps(input_data),
        json.dumps(output_data),
        performance_score
    ))
    self.connection.commit()
    cursor.close()
```

# ====================================================================

# 3. AGENTE BASE CON CAPACIDADES DE IA

# ====================================================================

class BaseAgent:
‚Äú‚Äù‚ÄúClase base para todos los agentes de IA‚Äù‚Äù‚Äù

```
def __init__(self, config: AgentConfig, db_manager: DatabaseManager):
    self.config = config
    self.db = db_manager
    self.memory = {}
    self.performance_history = []
    
async def process_task(self, task: Task) -> Dict:
    """Procesa una tarea seg√∫n el tipo de agente"""
    print(f"ü§ñ Agente {self.config.agent_id} procesando tarea: {task.description}")
    
    # Registra inicio de tarea
    start_time = datetime.now()
    
    try:
        # Ejecuta la tarea espec√≠fica del agente
        result = await self._execute_task(task)
        
        # Calcula m√©tricas de rendimiento
        execution_time = (datetime.now() - start_time).total_seconds()
        performance_score = self._calculate_performance(result, execution_time)
        
        # Guarda datos de aprendizaje
        self.db.save_learning_data(
            self.config.agent_id,
            task.task_id,
            {"task_description": task.description, "start_time": str(start_time)},
            result,
            performance_score
        )
        
        # Actualiza estado de la tarea
        task.status = TaskStatus.COMPLETED
        self.db.save_task(task)
        
        return result
        
    except Exception as e:
        print(f"‚ùå Error procesando tarea: {e}")
        task.status = TaskStatus.FAILED
        self.db.save_task(task)
        return {"error": str(e), "success": False}

async def _execute_task(self, task: Task) -> Dict:
    """M√©todo que deben implementar las clases derivadas"""
    raise NotImplementedError("Cada agente debe implementar su l√≥gica espec√≠fica")

def _calculate_performance(self, result: Dict, execution_time: float) -> float:
    """Calcula una puntuaci√≥n de rendimiento basada en el resultado"""
    base_score = 0.8 if result.get("success", False) else 0.2
    time_penalty = min(execution_time / 60, 0.3)  # Penaliza tiempos > 1 min
    return max(0.1, base_score - time_penalty)

async def learn_from_feedback(self, task_id: str, feedback: Dict):
    """Aprende de retroalimentaci√≥n recibida"""
    print(f"üìö Agente {self.config.agent_id} aprendiendo de feedback")
    # Aqu√≠ implementar√≠as el algoritmo de fine-tuning espec√≠fico
    pass
```

# ====================================================================

# 4. AGENTES ESPECIALIZADOS

# ====================================================================

class CreatorAgent(BaseAgent):
‚Äú‚Äù‚ÄúAgente especializado en crear otros agentes‚Äù‚Äù‚Äù

```
async def _execute_task(self, task: Task) -> Dict:
    """Crea un nuevo agente especializado"""
    
    # Extrae par√°metros de la descripci√≥n de la tarea
    task_params = self._parse_creation_request(task.description)
    
    # Crea configuraci√≥n del nuevo agente
    new_agent_config = AgentConfig(
        agent_id=f"agent_{uuid.uuid4().hex[:8]}",
        agent_type=AgentType.SPECIALIST,
        specialization=task_params.get("specialization", "general"),
        capabilities=task_params.get("capabilities", ["basic_processing"]),
        created_at=datetime.now()
    )
    
    # Guarda el agente en la base de datos
    self.db.save_agent(new_agent_config)
    
    return {
        "success": True,
        "agent_id": new_agent_config.agent_id,
        "specialization": new_agent_config.specialization,
        "message": f"Agente {new_agent_config.agent_id} creado exitosamente"
    }

def _parse_creation_request(self, description: str) -> Dict:
    """Parsea la descripci√≥n para extraer par√°metros de creaci√≥n"""
    # Implementaci√≥n simplificada - en producci√≥n usar√≠as NLP
    params = {
        "specialization": "general",
        "capabilities": ["basic_processing"]
    }
    
    if "an√°lisis" in description.lower():
        params["specialization"] = "data_analysis"
        params["capabilities"] = ["data_processing", "pattern_recognition"]
    elif "revisi√≥n" in description.lower():
        params["specialization"] = "quality_review"
        params["capabilities"] = ["validation", "error_detection"]
    elif "coordinaci√≥n" in description.lower():
        params["specialization"] = "task_coordination"
        params["capabilities"] = ["task_management", "resource_allocation"]
        
    return params
```

class SpecialistAgent(BaseAgent):
‚Äú‚Äù‚ÄúAgente especializado en tareas espec√≠ficas‚Äù‚Äù‚Äù

```
async def _execute_task(self, task: Task) -> Dict:
    """Ejecuta tarea seg√∫n especializaci√≥n"""
    
    if self.config.specialization == "data_analysis":
        return await self._analyze_data(task)
    elif self.config.specialization == "quality_review":
        return await self._review_quality(task)
    elif self.config.specialization == "task_coordination":
        return await self._coordinate_tasks(task)
    else:
        return await self._general_processing(task)

async def _analyze_data(self, task: Task) -> Dict:
    """Simula an√°lisis de datos"""
    await asyncio.sleep(2)  # Simula procesamiento
    return {
        "success": True,
        "analysis_type": "data_analysis",
        "findings": ["Patr√≥n A detectado", "Anomal√≠a en dataset B"],
        "confidence": 0.85
    }

async def _review_quality(self, task: Task) -> Dict:
    """Simula revisi√≥n de calidad"""
    await asyncio.sleep(1.5)
    return {
        "success": True,
        "review_type": "quality_check",
        "issues_found": 2,
        "recommendations": ["Mejorar documentaci√≥n", "Agregar validaciones"]
    }

async def _coordinate_tasks(self, task: Task) -> Dict:
    """Simula coordinaci√≥n de tareas"""
    await asyncio.sleep(1)
    return {
        "success": True,
        "coordination_type": "task_management",
        "tasks_assigned": len(task.agent_ids),
        "estimated_completion": "2 horas"
    }

async def _general_processing(self, task: Task) -> Dict:
    """Procesamiento general"""
    await asyncio.sleep(1)
    return {
        "success": True,
        "processing_type": "general",
        "result": f"Tarea {task.task_id} procesada exitosamente"
    }
```

class ReviewerAgent(BaseAgent):
‚Äú‚Äù‚ÄúAgente especializado en revisar trabajo de otros agentes‚Äù‚Äù‚Äù

```
async def _execute_task(self, task: Task) -> Dict:
    """Revisa el trabajo de otros agentes"""
    
    # Busca tareas completadas para revisar
    cursor = self.db.connection.cursor(cursor_factory=RealDictCursor)
    cursor.execute("""
        SELECT * FROM tasks WHERE status = 'completed' 
        AND task_id != %s ORDER BY completed_at DESC LIMIT 5
    """, (task.task_id,))
    
    completed_tasks = cursor.fetchall()
    cursor.close()
    
    reviews = []
    for completed_task in completed_tasks:
        review = await self._review_task_result(completed_task)
        reviews.append(review)
    
    return {
        "success": True,
        "reviews_completed": len(reviews),
        "reviews": reviews,
        "overall_quality_score": sum(r["quality_score"] for r in reviews) / len(reviews) if reviews else 0
    }

async def _review_task_result(self, task_data: Dict) -> Dict:
    """Revisa el resultado de una tarea espec√≠fica"""
    await asyncio.sleep(0.5)
    
    # Simula an√°lisis de calidad
    quality_score = 0.8  # En producci√≥n, usar√≠as algoritmos m√°s sofisticados
    
    return {
        "task_id": task_data["task_id"],
        "quality_score": quality_score,
        "feedback": "Trabajo bien ejecutado con margen de mejora en documentaci√≥n",
        "approved": quality_score > 0.7
    }
```

# ====================================================================

# 5. COORDINADOR DE TAREAS COLABORATIVAS

# ====================================================================

class TaskCoordinator:
‚Äú‚Äù‚ÄúCoordina la ejecuci√≥n de tareas entre m√∫ltiples agentes‚Äù‚Äù‚Äù

```
def __init__(self, db_manager: DatabaseManager):
    self.db = db_manager
    self.agents = {}

def register_agent(self, agent: BaseAgent):
    """Registra un agente en el coordinador"""
    self.agents[agent.config.agent_id] = agent
    print(f"‚úÖ Agente {agent.config.agent_id} registrado")

async def execute_collaborative_task(self, task: Task) -> Dict:
    """Ejecuta una tarea que requiere colaboraci√≥n entre agentes"""
    
    if task.collaboration_type == "solo":
        return await self._execute_solo_task(task)
    elif task.collaboration_type == "parallel":
        return await self._execute_parallel_task(task)
    elif task.collaboration_type == "sequential":
        return await self._execute_sequential_task(task)
    else:
        raise ValueError(f"Tipo de colaboraci√≥n no soportado: {task.collaboration_type}")

async def _execute_solo_task(self, task: Task) -> Dict:
    """Ejecuta una tarea con un solo agente"""
    agent_id = task.agent_ids[0]
    agent = self.agents.get(agent_id)
    
    if not agent:
        return {"error": f"Agente {agent_id} no encontrado", "success": False}
    
    return await agent.process_task(task)

async def _execute_parallel_task(self, task: Task) -> Dict:
    """Ejecuta una tarea con m√∫ltiples agentes en paralelo"""
    tasks_coroutines = []
    
    for agent_id in task.agent_ids:
        agent = self.agents.get(agent_id)
        if agent:
            # Crea sub-tarea para cada agente
            sub_task = Task(
                task_id=f"{task.task_id}_sub_{agent_id}",
                description=f"Sub-tarea de {task.description} para {agent_id}",
                agent_ids=[agent_id],
                status=TaskStatus.PENDING,
                collaboration_type="solo"
            )
            tasks_coroutines.append(agent.process_task(sub_task))
    
    # Ejecuta todas las tareas en paralelo
    results = await asyncio.gather(*tasks_coroutines, return_exceptions=True)
    
    return {
        "success": True,
        "collaboration_type": "parallel",
        "agent_results": dict(zip(task.agent_ids, results)),
        "agents_count": len(task.agent_ids)
    }

async def _execute_sequential_task(self, task: Task) -> Dict:
    """Ejecuta una tarea con m√∫ltiples agentes secuencialmente"""
    results = []
    current_input = task.description
    
    for agent_id in task.agent_ids:
        agent = self.agents.get(agent_id)
        if agent:
            # Crea sub-tarea secuencial
            sub_task = Task(
                task_id=f"{task.task_id}_seq_{agent_id}",
                description=current_input,
                agent_ids=[agent_id],
                status=TaskStatus.PENDING,
                collaboration_type="solo"
            )
            
            result = await agent.process_task(sub_task)
            results.append(result)
            
            # El resultado se convierte en input para el siguiente agente
            current_input = f"Proceso anterior: {result}. Continuar con: {task.description}"
    
    return {
        "success": True,
        "collaboration_type": "sequential",
        "sequential_results": results,
        "final_result": results[-1] if results else None
    }
```

# ====================================================================

# 6. SISTEMA PRINCIPAL DE GESTI√ìN

# ====================================================================

class AIAgentSystem:
‚Äú‚Äù‚ÄúSistema principal que gestiona todo el ecosistema de agentes‚Äù‚Äù‚Äù

```
def __init__(self, db_config: Dict):
    self.db = DatabaseManager(db_config)
    self.coordinator = TaskCoordinator(self.db)
    self.agents = {}
    self.task_queue = []
    
async def initialize(self):
    """Inicializa el sistema"""
    print("üöÄ Inicializando Sistema de Agentes de IA...")
    
    # Conecta a la base de datos
    self.db.connect()
    self.db.create_tables()
    
    # Crea agente creador principal
    creator_config = AgentConfig(
        agent_id="creator_master",
        agent_type=AgentType.CREATOR,
        specialization="agent_creation",
        capabilities=["create_agents", "configure_specializations"]
    )
    
    creator_agent = CreatorAgent(creator_config, self.db)
    self.register_agent(creator_agent)
    
    # Crea agente revisor principal
    reviewer_config = AgentConfig(
        agent_id="reviewer_master",
        agent_type=AgentType.REVIEWER,
        specialization="quality_assurance",
        capabilities=["quality_review", "performance_analysis"]
    )
    
    reviewer_agent = ReviewerAgent(reviewer_config, self.db)
    self.register_agent(reviewer_agent)
    
    print("‚úÖ Sistema inicializado correctamente")

def register_agent(self, agent: BaseAgent):
    """Registra un agente en el sistema"""
    self.agents[agent.config.agent_id] = agent
    self.coordinator.register_agent(agent)
    self.db.save_agent(agent.config)
    
async def create_specialized_agent(self, specialization: str, capabilities: List[str]) -> str:
    """Crea un nuevo agente especializado"""
    
    # Crea tarea para el agente creador
    task = Task(
        task_id=f"create_agent_{uuid.uuid4().hex[:8]}",
        description=f"Crear agente especializado en {specialization} con capacidades: {', '.join(capabilities)}",
        agent_ids=["creator_master"],
        status=TaskStatus.PENDING,
        collaboration_type="solo"
    )
    
    # Ejecuta la creaci√≥n
    result = await self.coordinator.execute_collaborative_task(task)
    
    if result.get("success"):
        # Crea instancia del nuevo agente
        new_agent_id = result["agent_id"]
        new_config = AgentConfig(
            agent_id=new_agent_id,
            agent_type=AgentType.SPECIALIST,
            specialization=specialization,
            capabilities=capabilities
        )
        
        new_agent = SpecialistAgent(new_config, self.db)
        self.register_agent(new_agent)
        
        return new_agent_id
    else:
        raise Exception(f"Error creando agente: {result}")

async def assign_task(self, description: str, agent_ids: List[str], 
                     collaboration_type: str = "solo", priority: int = 1) -> str:
    """Asigna una nueva tarea a uno o m√°s agentes"""
    
    task = Task(
        task_id=f"task_{uuid.uuid4().hex[:8]}",
        description=description,
        agent_ids=agent_ids,
        status=TaskStatus.PENDING,
        priority=priority,
        collaboration_type=collaboration_type,
        created_at=datetime.now()
    )
    
    self.db.save_task(task)
    
    # Ejecuta la tarea
    result = await self.coordinator.execute_collaborative_task(task)
    
    print(f"üìã Tarea {task.task_id} completada: {result}")
    return task.task_id

async def review_agent_performance(self) -> Dict:
    """Ejecuta revisi√≥n de rendimiento de todos los agentes"""
    
    review_task = Task(
        task_id=f"review_{uuid.uuid4().hex[:8]}",
        description="Revisar rendimiento general del sistema de agentes",
        agent_ids=["reviewer_master"],
        status=TaskStatus.PENDING,
        collaboration_type="solo"
    )
    
    return await self.coordinator.execute_collaborative_task(review_task)
```

# ====================================================================

# 7. EJEMPLO DE USO DEL SISTEMA

# ====================================================================

async def main():
‚Äú‚Äù‚ÄúFunci√≥n principal de demostraci√≥n‚Äù‚Äù‚Äù

```
# Configuraci√≥n de base de datos
db_config = {
    'host': 'localhost',
    'database': 'ai_agents_db',
    'user': 'postgres',
    'password': 'tu_password'
}

# Inicializa el sistema
system = AIAgentSystem(db_config)
await system.initialize()

print("\n" + "="*60)
print("üéØ DEMOSTRANDO CAPACIDADES DEL SISTEMA")
print("="*60)

# 1. Crear agentes especializados
print("\n1Ô∏è‚É£ Creando agentes especializados...")

analyst_id = await system.create_specialized_agent(
    specialization="data_analysis",
    capabilities=["pattern_recognition", "statistical_analysis"]
)
print(f"‚úÖ Agente analista creado: {analyst_id}")

coordinator_id = await system.create_specialized_agent(
    specialization="task_coordination", 
    capabilities=["project_management", "resource_allocation"]
)
print(f"‚úÖ Agente coordinador creado: {coordinator_id}")

# 2. Asignar tareas individuales
print("\n2Ô∏è‚É£ Asignando tareas individuales...")

task1_id = await system.assign_task(
    description="Analizar datos de rendimiento del √∫ltimo trimestre",
    agent_ids=[analyst_id],
    collaboration_type="solo"
)

task2_id = await system.assign_task(
    description="Coordinar distribuci√≥n de tareas para el equipo de desarrollo",
    agent_ids=[coordinator_id],
    collaboration_type="solo"
)

# 3. Tarea colaborativa en paralelo
print("\n3Ô∏è‚É£ Ejecutando tarea colaborativa en paralelo...")

parallel_task_id = await system.assign_task(
    description="An√°lisis integral de proyecto con revisi√≥n de calidad",
    agent_ids=[analyst_id, coordinator_id],
    collaboration_type="parallel",
    priority=2
)

# 4. Tarea colaborativa secuencial
print("\n4Ô∏è‚É£ Ejecutando tarea colaborativa secuencial...")

sequential_task_id = await system.assign_task(
    description="Proceso completo: an√°lisis ‚Üí coordinaci√≥n ‚Üí optimizaci√≥n",
    agent_ids=[analyst_id, coordinator_id],
    collaboration_type="sequential",
    priority=3
)

# 5. Revisi√≥n de rendimiento
print("\n5Ô∏è‚É£ Ejecutando revisi√≥n de rendimiento...")

performance_review = await system.review_agent_performance()
print(f"üìä Revisi√≥n completada: {performance_review}")

print("\n" + "="*60)
print("üéâ DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE")
print("="*60)
print(f"‚úÖ Agentes creados: {len(system.agents)}")
print(f"‚úÖ Tareas ejecutadas: 5")
print(f"‚úÖ Sistema funcionando correctamente")
```

if **name** == ‚Äú**main**‚Äù:
asyncio.run(main())